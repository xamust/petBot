// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: collect.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClubsInfoClient is the client API for ClubsInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClubsInfoClient interface {
	GetClubs(ctx context.Context, in *Club, opts ...grpc.CallOption) (*ClubsName, error)
	GetShedule(ctx context.Context, in *ClubUrl, opts ...grpc.CallOption) (*Shedule, error)
}

type clubsInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewClubsInfoClient(cc grpc.ClientConnInterface) ClubsInfoClient {
	return &clubsInfoClient{cc}
}

func (c *clubsInfoClient) GetClubs(ctx context.Context, in *Club, opts ...grpc.CallOption) (*ClubsName, error) {
	out := new(ClubsName)
	err := c.cc.Invoke(ctx, "/ecommerce.ClubsInfo/getClubs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubsInfoClient) GetShedule(ctx context.Context, in *ClubUrl, opts ...grpc.CallOption) (*Shedule, error) {
	out := new(Shedule)
	err := c.cc.Invoke(ctx, "/ecommerce.ClubsInfo/getShedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClubsInfoServer is the server API for ClubsInfo service.
// All implementations should embed UnimplementedClubsInfoServer
// for forward compatibility
type ClubsInfoServer interface {
	GetClubs(context.Context, *Club) (*ClubsName, error)
	GetShedule(context.Context, *ClubUrl) (*Shedule, error)
}

// UnimplementedClubsInfoServer should be embedded to have forward compatible implementations.
type UnimplementedClubsInfoServer struct {
}

func (UnimplementedClubsInfoServer) GetClubs(context.Context, *Club) (*ClubsName, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClubs not implemented")
}
func (UnimplementedClubsInfoServer) GetShedule(context.Context, *ClubUrl) (*Shedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShedule not implemented")
}

// UnsafeClubsInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClubsInfoServer will
// result in compilation errors.
type UnsafeClubsInfoServer interface {
	mustEmbedUnimplementedClubsInfoServer()
}

func RegisterClubsInfoServer(s grpc.ServiceRegistrar, srv ClubsInfoServer) {
	s.RegisterService(&ClubsInfo_ServiceDesc, srv)
}

func _ClubsInfo_GetClubs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Club)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubsInfoServer).GetClubs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecommerce.ClubsInfo/getClubs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubsInfoServer).GetClubs(ctx, req.(*Club))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubsInfo_GetShedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubsInfoServer).GetShedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecommerce.ClubsInfo/getShedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubsInfoServer).GetShedule(ctx, req.(*ClubUrl))
	}
	return interceptor(ctx, in, info, handler)
}

// ClubsInfo_ServiceDesc is the grpc.ServiceDesc for ClubsInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClubsInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ecommerce.ClubsInfo",
	HandlerType: (*ClubsInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getClubs",
			Handler:    _ClubsInfo_GetClubs_Handler,
		},
		{
			MethodName: "getShedule",
			Handler:    _ClubsInfo_GetShedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collect.proto",
}
